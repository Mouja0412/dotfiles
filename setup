#!/usr/bin/env bash
    
export DOTFILES="$HOME/dotfiles"

if [[ $(basename ${SHELL}) != "zsh" ]]; then
    chsh -s `which zsh`
fi

# make the XDG_CONFIG_HOME directory if it doesn't exist
export XDG_CONFIG_HOME="$HOME/.config"
[[ -d $XDG_CONFIG_HOME ]] || mkdir -p $XDG_CONFIG_HOME

OS=`uname -r`
cwd=`pwd`

cd $DOTFILES

case $OS in
    "Darwin")
        sh @macos/init
        ;;
    "Linux")
        sh @linux/init
        ;;
esac

which antibody > /dev/null
# installing antibody, if its not present
if [[ $? -ne 0 ]]; then
    curl -sL git.io/antibody | sh -s
fi

# region Applications which do support $XDG_CONFIG_HOME
printf "Setting \`\${XDG_CONFIG_HOME}\` compliant configurations...\n"
cd $DOTFILES/configs

# apps that support $XDG_CONFIG_HOME
supports_xdg_config=`find . -maxdepth 1 -type d -not -name .`

for dir in $supports_xdg_config; do
    ln -sf $(pwd)/$(basename ${dir}) ${XDG_CONFIG_HOME}/${dir}
done
cd $DOTFILES
# endregion

# region Applications which don't support $XDG_CONFIG_HOME
printf "Setting \`\${XDG_CONFIG_HOME}\` non-compliant configurations...\n"
cd $DOTFILES/homedir
assholes_xdg_config=`find . -maxdepth 1 -not -name .keep -not -name .`
for dir in $assholes_xdg_config; do
    dir_="$(basename ${dir})"
    path="$(pwd)/${dir_}"

    if [[ -d ${dir_} ]]; then
        has_dots=`find ./${dir_} -maxdepth 1 -type f -name "\.*" -not -name .keep -not -name .`

        if [[ $has_dots == "" ]]; then
            ln -sf "${path}" "${HOME}/.${dir_}"
        else
            for file in $has_dots; do
                dotfile=$(basename ${file})
                ln -sf "${path}/${dotfile}" "${HOME}/${dotfile}"
            done
        fi
    else
        ln -sf "${path}" "${HOME}/.${dir_}"
    fi
done
cd $DOTFILES
# endregion

# region ZSH configuration
printf "Setting up \`zsh\` configuration...\n"
source ~/.zprofile 2> /dev/null
source ~/.zshrc 2> /dev/null

antibody bundle < ${ANTIBODY_PLUGS}.txt > ${ANTIBODY_PLUGS}_${OS_}.sh

source ~/.zprofile 2> /dev/null
source ~/.zshrc 2> /dev/null
# endregion

# region Setup Doom / Emacs
# store outside the repo since `emacs` configs differ by OS and version
printf "Setting up \`doom-emacs\`...\n"

rm -rf ${XDG_CONFIG_HOME}/emacs > /dev/null 2> /dev/null
git clone https://github.com/hlissner/doom-emacs ${XDG_CONFIG_HOME}/emacs
ln -sf ${XDG_CONFIG_HOME}/emacs ~/.emacs.d

# TODO: allow for `doom install` to be run on installation
# endregion

